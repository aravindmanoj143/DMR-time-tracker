{"ast":null,"code":"import { i as isStr, p as proxyCustomElement, H, a as inheritAttributes, g as getUrl, b as getName, h, c as isRTL, d as Host } from './index.js';\nconst validateContent = svgContent => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // setup this way to ensure it works on our buddy IE\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    const svgClass = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n    // root element must be an svg\n    // lets double check we've got valid elements\n    // do not allow scripts\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\nconst isValid = elm => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const name = elm.attributes[i].name;\n      if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nconst isSvgDataUrl = url => url.startsWith('data:image/svg+xml');\nconst isEncodedDataUrl = url => url.indexOf(';utf8,') !== -1;\nconst ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\n/**\n * Safely fallback to an empty svg\n */\nfunction safeFallback(url) {\n  const svg = '';\n  ioniconContent.set(url, svg);\n  return svg;\n}\nconst getSvgContent = (url, sanitize) => {\n  /**\n   * See if we already have a request for this url\n   */\n  const req = requests.get(url);\n  if (req) {\n    return req;\n  }\n  if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n    /**\n     * If the url is a data url of an svg, then try to parse it\n     * with the DOMParser. This works with content security policies enabled.\n     */\n    if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n      return Promise.resolve(getSvgByUrl(url));\n    }\n    return fetchSvg(url, sanitize);\n  }\n  return Promise.resolve(safeFallback(url));\n};\nfunction getSvgByUrl(url) {\n  if (!parser) {\n    /**\n     * Create an instance of the DOM parser. This creates a single\n     * parser instance for the entire app, which is more efficient.\n     */\n    parser = new DOMParser();\n  }\n  const doc = parser.parseFromString(url, 'text/html');\n  const svg = doc.querySelector('svg');\n  if (svg) {\n    ioniconContent.set(url, svg.outerHTML);\n    return svg.outerHTML;\n  }\n  throw new Error(`Could not parse svg from ${url}`);\n}\nfunction fetchSvg(url, sanitize) {\n  /**\n   * We don't already have a request\n   */\n  const req = fetch(url).then(rsp => {\n    /**\n     * When fetching from a file:// URL, some browsers return\n     * a 0 status code even when the request succeeds so don't\n     * rely on rsp.ok as the only signal of success.\n     */\n    return rsp.text().then(svgContent => {\n      if (svgContent && sanitize !== false) {\n        svgContent = validateContent(svgContent);\n      }\n      const svg = svgContent || '';\n      ioniconContent.set(url, svg);\n      return svg;\n    }).catch(() => safeFallback(url));\n  }).catch(() => safeFallback(url));\n  /**\n   * Cache for the same requests\n   */\n  requests.set(url, req);\n  return req;\n}\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}@supports (background: -webkit-named-image(i)){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}@supports not selector(:dir(rtl)) and selector(:host-context([dir='rtl'])){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}:host(.flip-rtl):host-context([dir='rtl']) .icon-inner{transform:scaleX(-1)}@supports selector(:dir(rtl)){:host(.flip-rtl:dir(rtl)) .icon-inner{transform:scaleX(-1)}:host(.flip-rtl:dir(ltr)) .icon-inner{transform:scaleX(1)}}:host(.icon-small){font-size:1.125rem !important}:host(.icon-large){font-size:2rem !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\nconst Icon = /*@__PURE__*/proxyCustomElement(class Icon extends H {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.iconName = null;\n    this.inheritedAttributes = {};\n    this.didLoadIcon = false;\n    this.isVisible = false;\n    /**\n     * The mode determines which platform styles to use.\n     */\n    this.mode = getIonMode();\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    this.lazy = false;\n    /**\n     * When set to `false`, SVG content that is HTTP fetched will not be checked\n     * if the response SVG content has any `<script>` elements, or any attributes\n     * that start with `on`, such as `onclick`.\n     * @default true\n     */\n    this.sanitize = true;\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n  connectedCallback() {\n    /**\n     * purposely do not return the promise here because loading\n     * the svg file should not hold up loading the app\n     * only load the svg if it's visible\n     */\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n  /**\n   * Loads the icon after the component has finished rendering.\n   */\n  componentDidLoad() {\n    /**\n     * Addresses an Angular issue where property values are assigned after the 'connectedCallback' but prior to the registration of watchers.\n     * This enhancement ensures the loading of an icon when the component has finished rendering and the icon has yet to apply the SVG data.\n     * This modification pertains to the usage of Angular's binding syntax:\n     * `<ion-icon [name]=\"myIconName\"></ion-icon>`\n     */\n    if (!this.didLoadIcon) {\n      this.loadIcon();\n    }\n  }\n  /**\n   * Disconnect the IntersectionObserver.\n   */\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  /**\n   * Wait until the icon is visible in the viewport.\n   * @param el - The element to observe.\n   * @param rootMargin - The root margin of the observer.\n   * @param cb - The callback to call when the element is visible.\n   */\n  waitUntilVisible(el, rootMargin, cb) {\n    /**\n     * IntersectionObserver is a browser API that allows you to observe\n     * the visibility of an element relative to a root element. It is\n     * supported in all modern browsers, except IE and when server-side\n     * rendering.\n     */\n    const hasIntersectionObserverSupport = Boolean(this.lazy && typeof window !== 'undefined' && window.IntersectionObserver);\n    /**\n     * browser doesn't support IntersectionObserver\n     * so just fallback to always show it\n     */\n    if (!hasIntersectionObserverSupport) {\n      return cb();\n    }\n    const io = this.io = new window.IntersectionObserver(data => {\n      if (data[0].isIntersecting) {\n        io.disconnect();\n        this.io = undefined;\n        cb();\n      }\n    }, {\n      rootMargin\n    });\n    io.observe(el);\n  }\n  /**\n   * Watch for changes to the icon name, src, icon, ios, or md properties.\n   * When a change is detected, the icon will be loaded.\n   */\n  loadIcon() {\n    if (this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (ioniconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = ioniconContent.get(url);\n        } else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => this.svgContent = ioniconContent.get(url));\n        }\n        this.didLoadIcon = true;\n      }\n    }\n    this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n  }\n  render() {\n    const {\n      flipRtl,\n      iconName,\n      inheritedAttributes,\n      el\n    } = this;\n    const mode = this.mode || 'md';\n    /**\n     * we have designated that arrows & chevrons should automatically flip (unless flip-rtl\n     * is set to false) because \"back\" is left in ltr and right in rtl, and \"forward\" is the opposite\n     */\n    const shouldAutoFlip = iconName ? (iconName.includes('arrow') || iconName.includes('chevron')) && flipRtl !== false : false;\n    /**\n     * if shouldBeFlippable is true, the icon should change direction when `dir` changes\n     */\n    const shouldBeFlippable = flipRtl || shouldAutoFlip;\n    return h(Host, Object.assign({\n      key: '0578c899781ca145dd8205acd9670af39b57cf2e',\n      role: \"img\",\n      class: Object.assign(Object.assign({\n        [mode]: true\n      }, createColorClasses(this.color)), {\n        [`icon-${this.size}`]: !!this.size,\n        'flip-rtl': shouldBeFlippable,\n        'icon-rtl': shouldBeFlippable && isRTL(el)\n      })\n    }, inheritedAttributes), this.svgContent ? h(\"div\", {\n      class: \"icon-inner\",\n      innerHTML: this.svgContent\n    }) : h(\"div\", {\n      class: \"icon-inner\"\n    }));\n  }\n  static get assetsDirs() {\n    return [\"svg\"];\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"name\": [\"loadIcon\"],\n      \"src\": [\"loadIcon\"],\n      \"icon\": [\"loadIcon\"],\n      \"ios\": [\"loadIcon\"],\n      \"md\": [\"loadIcon\"]\n    };\n  }\n  static get style() {\n    return iconCss;\n  }\n}, [1, \"ion-icon\", {\n  \"mode\": [1025],\n  \"color\": [1],\n  \"ios\": [1],\n  \"md\": [1],\n  \"flipRtl\": [4, \"flip-rtl\"],\n  \"name\": [513],\n  \"src\": [1],\n  \"icon\": [8],\n  \"size\": [1],\n  \"lazy\": [4],\n  \"sanitize\": [4],\n  \"svgContent\": [32],\n  \"isVisible\": [32]\n}, undefined, {\n  \"name\": [\"loadIcon\"],\n  \"src\": [\"loadIcon\"],\n  \"icon\": [\"loadIcon\"],\n  \"ios\": [\"loadIcon\"],\n  \"md\": [\"loadIcon\"]\n}]);\n/**\n * Get the mode of the document.\n * @returns The mode of the document.\n */\nconst getIonMode = () => typeof document !== 'undefined' && document.documentElement.getAttribute('mode') || 'md';\n/**\n * Create color classes for the icon.\n * @param color - The color of the icon.\n * @returns The color classes for the icon.\n */\nconst createColorClasses = color => {\n  return color ? {\n    'ion-color': true,\n    [`ion-color-${color}`]: true\n  } : null;\n};\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-icon\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-icon\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Icon);\n        }\n        break;\n    }\n  });\n}\nconst IonIcon = Icon;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonIcon, defineCustomElement };","map":{"version":3,"names":["i","isStr","p","proxyCustomElement","H","a","inheritAttributes","g","getUrl","b","getName","h","c","isRTL","d","Host","validateContent","svgContent","div","document","createElement","innerHTML","childNodes","length","nodeName","toLowerCase","removeChild","svgElm","firstElementChild","svgClass","getAttribute","setAttribute","trim","isValid","elm","nodeType","attributes","name","indexOf","isSvgDataUrl","url","startsWith","isEncodedDataUrl","ioniconContent","Map","requests","parser","safeFallback","svg","set","getSvgContent","sanitize","req","get","fetch","Promise","resolve","getSvgByUrl","fetchSvg","DOMParser","doc","parseFromString","querySelector","outerHTML","Error","then","rsp","text","catch","iconCss","Icon","constructor","__registerHost","__attachShadow","iconName","inheritedAttributes","didLoadIcon","isVisible","mode","getIonMode","lazy","componentWillLoad","el","connectedCallback","waitUntilVisible","loadIcon","componentDidLoad","disconnectedCallback","io","disconnect","undefined","rootMargin","cb","hasIntersectionObserverSupport","Boolean","window","IntersectionObserver","data","isIntersecting","observe","has","icon","ios","md","render","flipRtl","shouldAutoFlip","includes","shouldBeFlippable","Object","assign","key","role","class","createColorClasses","color","size","assetsDirs","watchers","style","documentElement","defineCustomElement$1","customElements","components","forEach","tagName","define","IonIcon","defineCustomElement"],"sources":["/home/project/node_modules/@ionic/angular/node_modules/ionicons/components/ion-icon.js"],"sourcesContent":["import { i as isStr, p as proxyCustomElement, H, a as inheritAttributes, g as getUrl, b as getName, h, c as isRTL, d as Host } from './index.js';\n\nconst validateContent = (svgContent) => {\n    const div = document.createElement('div');\n    div.innerHTML = svgContent;\n    // setup this way to ensure it works on our buddy IE\n    for (let i = div.childNodes.length - 1; i >= 0; i--) {\n        if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n            div.removeChild(div.childNodes[i]);\n        }\n    }\n    // must only have 1 root element\n    const svgElm = div.firstElementChild;\n    if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n        const svgClass = svgElm.getAttribute('class') || '';\n        svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n        // root element must be an svg\n        // lets double check we've got valid elements\n        // do not allow scripts\n        if (isValid(svgElm)) {\n            return div.innerHTML;\n        }\n    }\n    return '';\n};\nconst isValid = (elm) => {\n    if (elm.nodeType === 1) {\n        if (elm.nodeName.toLowerCase() === 'script') {\n            return false;\n        }\n        for (let i = 0; i < elm.attributes.length; i++) {\n            const name = elm.attributes[i].name;\n            if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n                return false;\n            }\n        }\n        for (let i = 0; i < elm.childNodes.length; i++) {\n            if (!isValid(elm.childNodes[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\nconst isSvgDataUrl = (url) => url.startsWith('data:image/svg+xml');\nconst isEncodedDataUrl = (url) => url.indexOf(';utf8,') !== -1;\n\nconst ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\n/**\n * Safely fallback to an empty svg\n */\nfunction safeFallback(url) {\n    const svg = '';\n    ioniconContent.set(url, svg);\n    return svg;\n}\nconst getSvgContent = (url, sanitize) => {\n    /**\n     * See if we already have a request for this url\n     */\n    const req = requests.get(url);\n    if (req) {\n        return req;\n    }\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n        /**\n         * If the url is a data url of an svg, then try to parse it\n         * with the DOMParser. This works with content security policies enabled.\n         */\n        if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n            return Promise.resolve(getSvgByUrl(url));\n        }\n        return fetchSvg(url, sanitize);\n    }\n    return Promise.resolve(safeFallback(url));\n};\nfunction getSvgByUrl(url) {\n    if (!parser) {\n        /**\n         * Create an instance of the DOM parser. This creates a single\n         * parser instance for the entire app, which is more efficient.\n         */\n        parser = new DOMParser();\n    }\n    const doc = parser.parseFromString(url, 'text/html');\n    const svg = doc.querySelector('svg');\n    if (svg) {\n        ioniconContent.set(url, svg.outerHTML);\n        return svg.outerHTML;\n    }\n    throw new Error(`Could not parse svg from ${url}`);\n}\nfunction fetchSvg(url, sanitize) {\n    /**\n     * We don't already have a request\n     */\n    const req = fetch(url)\n        .then((rsp) => {\n        /**\n         * When fetching from a file:// URL, some browsers return\n         * a 0 status code even when the request succeeds so don't\n         * rely on rsp.ok as the only signal of success.\n         */\n        return rsp\n            .text()\n            .then((svgContent) => {\n            if (svgContent && sanitize !== false) {\n                svgContent = validateContent(svgContent);\n            }\n            const svg = svgContent || '';\n            ioniconContent.set(url, svg);\n            return svg;\n        })\n            .catch(() => safeFallback(url));\n    })\n        .catch(() => safeFallback(url));\n    /**\n     * Cache for the same requests\n     */\n    requests.set(url, req);\n    return req;\n}\n\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}@supports (background: -webkit-named-image(i)){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}@supports not selector(:dir(rtl)) and selector(:host-context([dir='rtl'])){:host(.icon-rtl) .icon-inner{transform:scaleX(-1)}}:host(.flip-rtl):host-context([dir='rtl']) .icon-inner{transform:scaleX(-1)}@supports selector(:dir(rtl)){:host(.flip-rtl:dir(rtl)) .icon-inner{transform:scaleX(-1)}:host(.flip-rtl:dir(ltr)) .icon-inner{transform:scaleX(1)}}:host(.icon-small){font-size:1.125rem !important}:host(.icon-large){font-size:2rem !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\n\nconst Icon = /*@__PURE__*/ proxyCustomElement(class Icon extends H {\n    constructor() {\n        super();\n        this.__registerHost();\n        this.__attachShadow();\n        this.iconName = null;\n        this.inheritedAttributes = {};\n        this.didLoadIcon = false;\n        this.isVisible = false;\n        /**\n         * The mode determines which platform styles to use.\n         */\n        this.mode = getIonMode();\n        /**\n         * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n         * Default, `false`.\n         */\n        this.lazy = false;\n        /**\n         * When set to `false`, SVG content that is HTTP fetched will not be checked\n         * if the response SVG content has any `<script>` elements, or any attributes\n         * that start with `on`, such as `onclick`.\n         * @default true\n         */\n        this.sanitize = true;\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n    }\n    connectedCallback() {\n        /**\n         * purposely do not return the promise here because loading\n         * the svg file should not hold up loading the app\n         * only load the svg if it's visible\n         */\n        this.waitUntilVisible(this.el, '50px', () => {\n            this.isVisible = true;\n            this.loadIcon();\n        });\n    }\n    /**\n     * Loads the icon after the component has finished rendering.\n     */\n    componentDidLoad() {\n        /**\n         * Addresses an Angular issue where property values are assigned after the 'connectedCallback' but prior to the registration of watchers.\n         * This enhancement ensures the loading of an icon when the component has finished rendering and the icon has yet to apply the SVG data.\n         * This modification pertains to the usage of Angular's binding syntax:\n         * `<ion-icon [name]=\"myIconName\"></ion-icon>`\n         */\n        if (!this.didLoadIcon) {\n            this.loadIcon();\n        }\n    }\n    /**\n     * Disconnect the IntersectionObserver.\n     */\n    disconnectedCallback() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n    /**\n     * Wait until the icon is visible in the viewport.\n     * @param el - The element to observe.\n     * @param rootMargin - The root margin of the observer.\n     * @param cb - The callback to call when the element is visible.\n     */\n    waitUntilVisible(el, rootMargin, cb) {\n        /**\n         * IntersectionObserver is a browser API that allows you to observe\n         * the visibility of an element relative to a root element. It is\n         * supported in all modern browsers, except IE and when server-side\n         * rendering.\n         */\n        const hasIntersectionObserverSupport = Boolean(this.lazy && typeof window !== 'undefined' && window.IntersectionObserver);\n        /**\n         * browser doesn't support IntersectionObserver\n         * so just fallback to always show it\n         */\n        if (!hasIntersectionObserverSupport) {\n            return cb();\n        }\n        const io = (this.io = new window.IntersectionObserver((data) => {\n            if (data[0].isIntersecting) {\n                io.disconnect();\n                this.io = undefined;\n                cb();\n            }\n        }, { rootMargin }));\n        io.observe(el);\n    }\n    /**\n     * Watch for changes to the icon name, src, icon, ios, or md properties.\n     * When a change is detected, the icon will be loaded.\n     */\n    loadIcon() {\n        if (this.isVisible) {\n            const url = getUrl(this);\n            if (url) {\n                if (ioniconContent.has(url)) {\n                    // sync if it's already loaded\n                    this.svgContent = ioniconContent.get(url);\n                }\n                else {\n                    // async if it hasn't been loaded\n                    getSvgContent(url, this.sanitize).then(() => (this.svgContent = ioniconContent.get(url)));\n                }\n                this.didLoadIcon = true;\n            }\n        }\n        this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n    }\n    render() {\n        const { flipRtl, iconName, inheritedAttributes, el } = this;\n        const mode = this.mode || 'md';\n        /**\n         * we have designated that arrows & chevrons should automatically flip (unless flip-rtl\n         * is set to false) because \"back\" is left in ltr and right in rtl, and \"forward\" is the opposite\n         */\n        const shouldAutoFlip = iconName\n            ? (iconName.includes('arrow') || iconName.includes('chevron')) && flipRtl !== false\n            : false;\n        /**\n         * if shouldBeFlippable is true, the icon should change direction when `dir` changes\n         */\n        const shouldBeFlippable = flipRtl || shouldAutoFlip;\n        return (h(Host, Object.assign({ key: '0578c899781ca145dd8205acd9670af39b57cf2e', role: \"img\", class: Object.assign(Object.assign({ [mode]: true }, createColorClasses(this.color)), { [`icon-${this.size}`]: !!this.size, 'flip-rtl': shouldBeFlippable, 'icon-rtl': shouldBeFlippable && isRTL(el) }) }, inheritedAttributes), this.svgContent ? (h(\"div\", { class: \"icon-inner\", innerHTML: this.svgContent })) : (h(\"div\", { class: \"icon-inner\" }))));\n    }\n    static get assetsDirs() { return [\"svg\"]; }\n    get el() { return this; }\n    static get watchers() { return {\n        \"name\": [\"loadIcon\"],\n        \"src\": [\"loadIcon\"],\n        \"icon\": [\"loadIcon\"],\n        \"ios\": [\"loadIcon\"],\n        \"md\": [\"loadIcon\"]\n    }; }\n    static get style() { return iconCss; }\n}, [1, \"ion-icon\", {\n        \"mode\": [1025],\n        \"color\": [1],\n        \"ios\": [1],\n        \"md\": [1],\n        \"flipRtl\": [4, \"flip-rtl\"],\n        \"name\": [513],\n        \"src\": [1],\n        \"icon\": [8],\n        \"size\": [1],\n        \"lazy\": [4],\n        \"sanitize\": [4],\n        \"svgContent\": [32],\n        \"isVisible\": [32]\n    }, undefined, {\n        \"name\": [\"loadIcon\"],\n        \"src\": [\"loadIcon\"],\n        \"icon\": [\"loadIcon\"],\n        \"ios\": [\"loadIcon\"],\n        \"md\": [\"loadIcon\"]\n    }]);\n/**\n * Get the mode of the document.\n * @returns The mode of the document.\n */\nconst getIonMode = () => (typeof document !== 'undefined' && document.documentElement.getAttribute('mode')) || 'md';\n/**\n * Create color classes for the icon.\n * @param color - The color of the icon.\n * @returns The color classes for the icon.\n */\nconst createColorClasses = (color) => {\n    return color\n        ? {\n            'ion-color': true,\n            [`ion-color-${color}`]: true,\n        }\n        : null;\n};\nfunction defineCustomElement$1() {\n    if (typeof customElements === \"undefined\") {\n        return;\n    }\n    const components = [\"ion-icon\"];\n    components.forEach(tagName => { switch (tagName) {\n        case \"ion-icon\":\n            if (!customElements.get(tagName)) {\n                customElements.define(tagName, Icon);\n            }\n            break;\n    } });\n}\n\nconst IonIcon = Icon;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonIcon, defineCustomElement };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}