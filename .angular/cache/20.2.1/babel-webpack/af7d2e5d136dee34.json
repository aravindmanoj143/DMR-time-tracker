{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { getAssetPath, proxyCustomElement, HTMLElement, Build, h, Host } from '@stencil/core/internal/client';\nlet CACHED_MAP;\nconst getIconMap = () => {\n  if (typeof window === 'undefined') {\n    return new Map();\n  } else {\n    if (!CACHED_MAP) {\n      const win = window;\n      win.Ionicons = win.Ionicons || {};\n      CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n    }\n    return CACHED_MAP;\n  }\n};\nconst getUrl = i => {\n  let url = getSrc(i.src);\n  if (url) {\n    return url;\n  }\n  url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n  if (url) {\n    return getNamedUrl(url, i);\n  }\n  if (i.icon) {\n    url = getSrc(i.icon);\n    if (url) {\n      return url;\n    }\n    url = getSrc(i.icon[i.mode]);\n    if (url) {\n      return url;\n    }\n  }\n  return null;\n};\nconst getNamedUrl = (iconName, iconEl) => {\n  const url = getIconMap().get(iconName);\n  if (url) {\n    return url;\n  }\n  try {\n    return getAssetPath(`svg/${iconName}.svg`);\n  } catch (e) {\n    console.log('e', e);\n    /**\n     * In the custom elements build version of ionicons, referencing an icon\n     * by name will throw an invalid URL error because the asset path is not defined.\n     * This catches that error and logs something that is more developer-friendly.\n     * We also include a reference to the ion-icon element so developers can\n     * figure out which instance of ion-icon needs to be updated.\n     */\n    console.warn(`[Ionicons Warning]: Could not load icon with name \"${iconName}\". Ensure that the icon is registered using addIcons or that the icon SVG data is passed directly to the icon component.`, iconEl);\n  }\n};\nconst getName = (iconName, icon, mode, ios, md) => {\n  // default to \"md\" if somehow the mode wasn't set\n  mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n  // if an icon was passed in using the ios or md attributes\n  // set the iconName to whatever was passed in\n  if (ios && mode === 'ios') {\n    iconName = toLower(ios);\n  } else if (md && mode === 'md') {\n    iconName = toLower(md);\n  } else {\n    if (!iconName && icon && !isSrc(icon)) {\n      iconName = icon;\n    }\n    if (isStr(iconName)) {\n      iconName = toLower(iconName);\n    }\n  }\n  if (!isStr(iconName) || iconName.trim() === '') {\n    return null;\n  }\n  // only allow alpha characters and dash\n  const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n  if (invalidChars !== '') {\n    return null;\n  }\n  return iconName;\n};\nconst getSrc = src => {\n  if (isStr(src)) {\n    src = src.trim();\n    if (isSrc(src)) {\n      return src;\n    }\n  }\n  return null;\n};\nconst isSrc = str => str.length > 0 && /(\\/|\\.)/.test(str);\nconst isStr = val => typeof val === 'string';\nconst toLower = val => val.toLowerCase();\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n  const attributeObject = {};\n  attributes.forEach(attr => {\n    if (el.hasAttribute(attr)) {\n      const value = el.getAttribute(attr);\n      if (value !== null) {\n        attributeObject[attr] = el.getAttribute(attr);\n      }\n      el.removeAttribute(attr);\n    }\n  });\n  return attributeObject;\n};\n/**\n * Returns `true` if the document or host element\n * has a `dir` set to `rtl`. The host value will always\n * take priority over the root document value.\n */\nconst isRTL = hostEl => {\n  if (hostEl) {\n    if (hostEl.dir !== '') {\n      return hostEl.dir.toLowerCase() === 'rtl';\n    }\n  }\n  return (document === null || document === void 0 ? void 0 : document.dir.toLowerCase()) === 'rtl';\n};\nconst validateContent = svgContent => {\n  const div = document.createElement('div');\n  div.innerHTML = svgContent;\n  // setup this way to ensure it works on our buddy IE\n  for (let i = div.childNodes.length - 1; i >= 0; i--) {\n    if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n      div.removeChild(div.childNodes[i]);\n    }\n  }\n  // must only have 1 root element\n  const svgElm = div.firstElementChild;\n  if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n    const svgClass = svgElm.getAttribute('class') || '';\n    svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n    // root element must be an svg\n    // lets double check we've got valid elements\n    // do not allow scripts\n    if (isValid(svgElm)) {\n      return div.innerHTML;\n    }\n  }\n  return '';\n};\nconst isValid = elm => {\n  if (elm.nodeType === 1) {\n    if (elm.nodeName.toLowerCase() === 'script') {\n      return false;\n    }\n    for (let i = 0; i < elm.attributes.length; i++) {\n      const name = elm.attributes[i].name;\n      if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n        return false;\n      }\n    }\n    for (let i = 0; i < elm.childNodes.length; i++) {\n      if (!isValid(elm.childNodes[i])) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\nconst isSvgDataUrl = url => url.startsWith('data:image/svg+xml');\nconst isEncodedDataUrl = url => url.indexOf(';utf8,') !== -1;\nconst ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\n/**\n * Safely fallback to an empty svg\n */\nfunction safeFallback(url) {\n  const svg = '';\n  ioniconContent.set(url, svg);\n  return svg;\n}\nconst getSvgContent = (url, sanitize) => {\n  /**\n   * See if we already have a request for this url\n   */\n  const req = requests.get(url);\n  if (req) {\n    return req;\n  }\n  if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n    /**\n     * If the url is a data url of an svg, then try to parse it\n     * with the DOMParser. This works with content security policies enabled.\n     */\n    if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n      return Promise.resolve(getSvgByUrl(url));\n    }\n    return fetchSvg(url, sanitize);\n  }\n  return Promise.resolve(safeFallback(url));\n};\nfunction getSvgByUrl(url) {\n  if (!parser) {\n    /**\n     * Create an instance of the DOM parser. This creates a single\n     * parser instance for the entire app, which is more efficient.\n     */\n    parser = new DOMParser();\n  }\n  const doc = parser.parseFromString(url, 'text/html');\n  const svg = doc.querySelector('svg');\n  if (svg) {\n    ioniconContent.set(url, svg.outerHTML);\n    return svg.outerHTML;\n  }\n  throw new Error(`Could not parse svg from ${url}`);\n}\nfunction fetchSvg(url, sanitize) {\n  /**\n   * We don't already have a request\n   */\n  const req = fetch(url).then(rsp => {\n    /**\n     * When fetching from a file:// URL, some browsers return\n     * a 0 status code even when the request succeeds so don't\n     * rely on rsp.ok as the only signal of success.\n     */\n    return rsp.text().then(svgContent => {\n      if (svgContent && sanitize !== false) {\n        svgContent = validateContent(svgContent);\n      }\n      const svg = svgContent || '';\n      ioniconContent.set(url, svg);\n      return svg;\n    }).catch(() => safeFallback(url));\n  }).catch(() => safeFallback(url));\n  /**\n   * Cache for the same requests\n   */\n  requests.set(url, req);\n  return req;\n}\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;-webkit-box-sizing:content-box !important;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}@supports (background: -webkit-named-image(i)){:host(.icon-rtl) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}}@supports not selector(:dir(rtl)) and selector(:host-context([dir='rtl'])){:host(.icon-rtl) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}}:host(.flip-rtl):host-context([dir='rtl']) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}@supports selector(:dir(rtl)){:host(.flip-rtl:dir(rtl)) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}:host(.flip-rtl:dir(ltr)) .icon-inner{-webkit-transform:scaleX(1);transform:scaleX(1)}}:host(.icon-small){font-size:1.125rem !important}:host(.icon-large){font-size:2rem !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\nconst Icon = /*@__PURE__*/proxyCustomElement(class Icon extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    this.iconName = null;\n    this.inheritedAttributes = {};\n    this.didLoadIcon = false;\n    this.isVisible = false;\n    /**\n     * The mode determines which platform styles to use.\n     */\n    this.mode = getIonMode();\n    /**\n     * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n     * Default, `false`.\n     */\n    this.lazy = false;\n    /**\n     * When set to `false`, SVG content that is HTTP fetched will not be checked\n     * if the response SVG content has any `<script>` elements, or any attributes\n     * that start with `on`, such as `onclick`.\n     * @default true\n     */\n    this.sanitize = true;\n  }\n  componentWillLoad() {\n    this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n  }\n  connectedCallback() {\n    /**\n     * purposely do not return the promise here because loading\n     * the svg file should not hold up loading the app\n     * only load the svg if it's visible\n     */\n    this.waitUntilVisible(this.el, '50px', () => {\n      this.isVisible = true;\n      this.loadIcon();\n    });\n  }\n  /**\n   * Loads the icon after the component has finished rendering.\n   */\n  componentDidLoad() {\n    /**\n     * Addresses an Angular issue where property values are assigned after the 'connectedCallback' but prior to the registration of watchers.\n     * This enhancement ensures the loading of an icon when the component has finished rendering and the icon has yet to apply the SVG data.\n     * This modification pertains to the usage of Angular's binding syntax:\n     * `<ion-icon [name]=\"myIconName\"></ion-icon>`\n     */\n    if (!this.didLoadIcon) {\n      this.loadIcon();\n    }\n  }\n  /**\n   * Disconnect the IntersectionObserver.\n   */\n  disconnectedCallback() {\n    if (this.io) {\n      this.io.disconnect();\n      this.io = undefined;\n    }\n  }\n  /**\n   * Wait until the icon is visible in the viewport.\n   * @param el - The element to observe.\n   * @param rootMargin - The root margin of the observer.\n   * @param cb - The callback to call when the element is visible.\n   */\n  waitUntilVisible(el, rootMargin, cb) {\n    /**\n     * IntersectionObserver is a browser API that allows you to observe\n     * the visibility of an element relative to a root element. It is\n     * supported in all modern browsers, except IE and when server-side\n     * rendering.\n     */\n    const hasIntersectionObserverSupport = Boolean(Build.isBrowser && this.lazy && typeof window !== 'undefined' && window.IntersectionObserver);\n    /**\n     * browser doesn't support IntersectionObserver\n     * so just fallback to always show it\n     */\n    if (!hasIntersectionObserverSupport) {\n      return cb();\n    }\n    const io = this.io = new window.IntersectionObserver(data => {\n      if (data[0].isIntersecting) {\n        io.disconnect();\n        this.io = undefined;\n        cb();\n      }\n    }, {\n      rootMargin\n    });\n    io.observe(el);\n  }\n  /**\n   * Watch for changes to the icon name, src, icon, ios, or md properties.\n   * When a change is detected, the icon will be loaded.\n   */\n  loadIcon() {\n    if (Build.isBrowser && this.isVisible) {\n      const url = getUrl(this);\n      if (url) {\n        if (ioniconContent.has(url)) {\n          // sync if it's already loaded\n          this.svgContent = ioniconContent.get(url);\n        } else {\n          // async if it hasn't been loaded\n          getSvgContent(url, this.sanitize).then(() => this.svgContent = ioniconContent.get(url));\n        }\n        this.didLoadIcon = true;\n      }\n    }\n    this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n  }\n  render() {\n    const {\n      flipRtl,\n      iconName,\n      inheritedAttributes,\n      el\n    } = this;\n    const mode = this.mode || 'md';\n    /**\n     * we have designated that arrows & chevrons should automatically flip (unless flip-rtl\n     * is set to false) because \"back\" is left in ltr and right in rtl, and \"forward\" is the opposite\n     */\n    const shouldAutoFlip = iconName ? (iconName.includes('arrow') || iconName.includes('chevron')) && flipRtl !== false : false;\n    /**\n     * if shouldBeFlippable is true, the icon should change direction when `dir` changes\n     */\n    const shouldBeFlippable = flipRtl || shouldAutoFlip;\n    return h(Host, Object.assign({\n      key: '0578c899781ca145dd8205acd9670af39b57cf2e',\n      role: \"img\",\n      class: Object.assign(Object.assign({\n        [mode]: true\n      }, createColorClasses(this.color)), {\n        [`icon-${this.size}`]: !!this.size,\n        'flip-rtl': shouldBeFlippable,\n        'icon-rtl': shouldBeFlippable && isRTL(el)\n      })\n    }, inheritedAttributes), Build.isBrowser && this.svgContent ? h(\"div\", {\n      class: \"icon-inner\",\n      innerHTML: this.svgContent\n    }) : h(\"div\", {\n      class: \"icon-inner\"\n    }));\n  }\n  static get assetsDirs() {\n    return [\"svg\"];\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"name\": [\"loadIcon\"],\n      \"src\": [\"loadIcon\"],\n      \"icon\": [\"loadIcon\"],\n      \"ios\": [\"loadIcon\"],\n      \"md\": [\"loadIcon\"]\n    };\n  }\n  static get style() {\n    return iconCss;\n  }\n}, [257, \"ion-icon\", {\n  \"mode\": [1025],\n  \"color\": [1],\n  \"ios\": [1],\n  \"md\": [1],\n  \"flipRtl\": [4, \"flip-rtl\"],\n  \"name\": [513],\n  \"src\": [1],\n  \"icon\": [8],\n  \"size\": [1],\n  \"lazy\": [4],\n  \"sanitize\": [4],\n  \"svgContent\": [32],\n  \"isVisible\": [32]\n}, undefined, {\n  \"name\": [\"loadIcon\"],\n  \"src\": [\"loadIcon\"],\n  \"icon\": [\"loadIcon\"],\n  \"ios\": [\"loadIcon\"],\n  \"md\": [\"loadIcon\"]\n}]);\n/**\n * Get the mode of the document.\n * @returns The mode of the document.\n */\nconst getIonMode = () => Build.isBrowser && typeof document !== 'undefined' && document.documentElement.getAttribute('mode') || 'md';\n/**\n * Create color classes for the icon.\n * @param color - The color of the icon.\n * @returns The color classes for the icon.\n */\nconst createColorClasses = color => {\n  return color ? {\n    'ion-color': true,\n    [`ion-color-${color}`]: true\n  } : null;\n};\nfunction defineCustomElement() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-icon\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-icon\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, Icon);\n        }\n        break;\n    }\n  });\n}\nexport { Icon as I, defineCustomElement as d };","map":{"version":3,"names":["getAssetPath","proxyCustomElement","HTMLElement","Build","h","Host","CACHED_MAP","getIconMap","window","Map","win","Ionicons","map","getUrl","i","url","getSrc","src","getName","name","icon","mode","ios","md","getNamedUrl","iconName","iconEl","get","e","console","log","warn","toLower","isSrc","isStr","trim","invalidChars","replace","str","length","test","val","toLowerCase","inheritAttributes","el","attributes","attributeObject","forEach","attr","hasAttribute","value","getAttribute","removeAttribute","isRTL","hostEl","dir","document","validateContent","svgContent","div","createElement","innerHTML","childNodes","nodeName","removeChild","svgElm","firstElementChild","svgClass","setAttribute","isValid","elm","nodeType","indexOf","isSvgDataUrl","startsWith","isEncodedDataUrl","ioniconContent","requests","parser","safeFallback","svg","set","getSvgContent","sanitize","req","fetch","Promise","resolve","getSvgByUrl","fetchSvg","DOMParser","doc","parseFromString","querySelector","outerHTML","Error","then","rsp","text","catch","iconCss","Icon","constructor","__registerHost","__attachShadow","inheritedAttributes","didLoadIcon","isVisible","getIonMode","lazy","componentWillLoad","connectedCallback","waitUntilVisible","loadIcon","componentDidLoad","disconnectedCallback","io","disconnect","undefined","rootMargin","cb","hasIntersectionObserverSupport","Boolean","isBrowser","IntersectionObserver","data","isIntersecting","observe","has","render","flipRtl","shouldAutoFlip","includes","shouldBeFlippable","Object","assign","key","role","class","createColorClasses","color","size","assetsDirs","watchers","style","documentElement","defineCustomElement","customElements","components","tagName","define","I","d"],"sources":["/home/project/node_modules/@ionic/core/components/icon.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { getAssetPath, proxyCustomElement, HTMLElement, Build, h, Host } from '@stencil/core/internal/client';\n\nlet CACHED_MAP;\nconst getIconMap = () => {\n    if (typeof window === 'undefined') {\n        return new Map();\n    }\n    else {\n        if (!CACHED_MAP) {\n            const win = window;\n            win.Ionicons = win.Ionicons || {};\n            CACHED_MAP = win.Ionicons.map = win.Ionicons.map || new Map();\n        }\n        return CACHED_MAP;\n    }\n};\nconst getUrl = (i) => {\n    let url = getSrc(i.src);\n    if (url) {\n        return url;\n    }\n    url = getName(i.name, i.icon, i.mode, i.ios, i.md);\n    if (url) {\n        return getNamedUrl(url, i);\n    }\n    if (i.icon) {\n        url = getSrc(i.icon);\n        if (url) {\n            return url;\n        }\n        url = getSrc(i.icon[i.mode]);\n        if (url) {\n            return url;\n        }\n    }\n    return null;\n};\nconst getNamedUrl = (iconName, iconEl) => {\n    const url = getIconMap().get(iconName);\n    if (url) {\n        return url;\n    }\n    try {\n        return getAssetPath(`svg/${iconName}.svg`);\n    }\n    catch (e) {\n        console.log('e', e);\n        /**\n         * In the custom elements build version of ionicons, referencing an icon\n         * by name will throw an invalid URL error because the asset path is not defined.\n         * This catches that error and logs something that is more developer-friendly.\n         * We also include a reference to the ion-icon element so developers can\n         * figure out which instance of ion-icon needs to be updated.\n         */\n        console.warn(`[Ionicons Warning]: Could not load icon with name \"${iconName}\". Ensure that the icon is registered using addIcons or that the icon SVG data is passed directly to the icon component.`, iconEl);\n    }\n};\nconst getName = (iconName, icon, mode, ios, md) => {\n    // default to \"md\" if somehow the mode wasn't set\n    mode = (mode && toLower(mode)) === 'ios' ? 'ios' : 'md';\n    // if an icon was passed in using the ios or md attributes\n    // set the iconName to whatever was passed in\n    if (ios && mode === 'ios') {\n        iconName = toLower(ios);\n    }\n    else if (md && mode === 'md') {\n        iconName = toLower(md);\n    }\n    else {\n        if (!iconName && icon && !isSrc(icon)) {\n            iconName = icon;\n        }\n        if (isStr(iconName)) {\n            iconName = toLower(iconName);\n        }\n    }\n    if (!isStr(iconName) || iconName.trim() === '') {\n        return null;\n    }\n    // only allow alpha characters and dash\n    const invalidChars = iconName.replace(/[a-z]|-|\\d/gi, '');\n    if (invalidChars !== '') {\n        return null;\n    }\n    return iconName;\n};\nconst getSrc = (src) => {\n    if (isStr(src)) {\n        src = src.trim();\n        if (isSrc(src)) {\n            return src;\n        }\n    }\n    return null;\n};\nconst isSrc = (str) => str.length > 0 && /(\\/|\\.)/.test(str);\nconst isStr = (val) => typeof val === 'string';\nconst toLower = (val) => val.toLowerCase();\n/**\n * Elements inside of web components sometimes need to inherit global attributes\n * set on the host. For example, the inner input in `ion-input` should inherit\n * the `title` attribute that developers set directly on `ion-input`. This\n * helper function should be called in componentWillLoad and assigned to a variable\n * that is later used in the render function.\n *\n * This does not need to be reactive as changing attributes on the host element\n * does not trigger a re-render.\n */\nconst inheritAttributes = (el, attributes = []) => {\n    const attributeObject = {};\n    attributes.forEach((attr) => {\n        if (el.hasAttribute(attr)) {\n            const value = el.getAttribute(attr);\n            if (value !== null) {\n                attributeObject[attr] = el.getAttribute(attr);\n            }\n            el.removeAttribute(attr);\n        }\n    });\n    return attributeObject;\n};\n/**\n * Returns `true` if the document or host element\n * has a `dir` set to `rtl`. The host value will always\n * take priority over the root document value.\n */\nconst isRTL = (hostEl) => {\n    if (hostEl) {\n        if (hostEl.dir !== '') {\n            return hostEl.dir.toLowerCase() === 'rtl';\n        }\n    }\n    return (document === null || document === void 0 ? void 0 : document.dir.toLowerCase()) === 'rtl';\n};\n\nconst validateContent = (svgContent) => {\n    const div = document.createElement('div');\n    div.innerHTML = svgContent;\n    // setup this way to ensure it works on our buddy IE\n    for (let i = div.childNodes.length - 1; i >= 0; i--) {\n        if (div.childNodes[i].nodeName.toLowerCase() !== 'svg') {\n            div.removeChild(div.childNodes[i]);\n        }\n    }\n    // must only have 1 root element\n    const svgElm = div.firstElementChild;\n    if (svgElm && svgElm.nodeName.toLowerCase() === 'svg') {\n        const svgClass = svgElm.getAttribute('class') || '';\n        svgElm.setAttribute('class', (svgClass + ' s-ion-icon').trim());\n        // root element must be an svg\n        // lets double check we've got valid elements\n        // do not allow scripts\n        if (isValid(svgElm)) {\n            return div.innerHTML;\n        }\n    }\n    return '';\n};\nconst isValid = (elm) => {\n    if (elm.nodeType === 1) {\n        if (elm.nodeName.toLowerCase() === 'script') {\n            return false;\n        }\n        for (let i = 0; i < elm.attributes.length; i++) {\n            const name = elm.attributes[i].name;\n            if (isStr(name) && name.toLowerCase().indexOf('on') === 0) {\n                return false;\n            }\n        }\n        for (let i = 0; i < elm.childNodes.length; i++) {\n            if (!isValid(elm.childNodes[i])) {\n                return false;\n            }\n        }\n    }\n    return true;\n};\nconst isSvgDataUrl = (url) => url.startsWith('data:image/svg+xml');\nconst isEncodedDataUrl = (url) => url.indexOf(';utf8,') !== -1;\n\nconst ioniconContent = new Map();\nconst requests = new Map();\nlet parser;\n/**\n * Safely fallback to an empty svg\n */\nfunction safeFallback(url) {\n    const svg = '';\n    ioniconContent.set(url, svg);\n    return svg;\n}\nconst getSvgContent = (url, sanitize) => {\n    /**\n     * See if we already have a request for this url\n     */\n    const req = requests.get(url);\n    if (req) {\n        return req;\n    }\n    if (typeof fetch !== 'undefined' && typeof document !== 'undefined') {\n        /**\n         * If the url is a data url of an svg, then try to parse it\n         * with the DOMParser. This works with content security policies enabled.\n         */\n        if (isSvgDataUrl(url) && isEncodedDataUrl(url)) {\n            return Promise.resolve(getSvgByUrl(url));\n        }\n        return fetchSvg(url, sanitize);\n    }\n    return Promise.resolve(safeFallback(url));\n};\nfunction getSvgByUrl(url) {\n    if (!parser) {\n        /**\n         * Create an instance of the DOM parser. This creates a single\n         * parser instance for the entire app, which is more efficient.\n         */\n        parser = new DOMParser();\n    }\n    const doc = parser.parseFromString(url, 'text/html');\n    const svg = doc.querySelector('svg');\n    if (svg) {\n        ioniconContent.set(url, svg.outerHTML);\n        return svg.outerHTML;\n    }\n    throw new Error(`Could not parse svg from ${url}`);\n}\nfunction fetchSvg(url, sanitize) {\n    /**\n     * We don't already have a request\n     */\n    const req = fetch(url)\n        .then((rsp) => {\n        /**\n         * When fetching from a file:// URL, some browsers return\n         * a 0 status code even when the request succeeds so don't\n         * rely on rsp.ok as the only signal of success.\n         */\n        return rsp\n            .text()\n            .then((svgContent) => {\n            if (svgContent && sanitize !== false) {\n                svgContent = validateContent(svgContent);\n            }\n            const svg = svgContent || '';\n            ioniconContent.set(url, svg);\n            return svg;\n        })\n            .catch(() => safeFallback(url));\n    })\n        .catch(() => safeFallback(url));\n    /**\n     * Cache for the same requests\n     */\n    requests.set(url, req);\n    return req;\n}\n\nconst iconCss = \":host{display:inline-block;width:1em;height:1em;contain:strict;fill:currentColor;-webkit-box-sizing:content-box !important;box-sizing:content-box !important}:host .ionicon{stroke:currentColor}.ionicon-fill-none{fill:none}.ionicon-stroke-width{stroke-width:var(--ionicon-stroke-width, 32px)}.icon-inner,.ionicon,svg{display:block;height:100%;width:100%}@supports (background: -webkit-named-image(i)){:host(.icon-rtl) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}}@supports not selector(:dir(rtl)) and selector(:host-context([dir='rtl'])){:host(.icon-rtl) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}}:host(.flip-rtl):host-context([dir='rtl']) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}@supports selector(:dir(rtl)){:host(.flip-rtl:dir(rtl)) .icon-inner{-webkit-transform:scaleX(-1);transform:scaleX(-1)}:host(.flip-rtl:dir(ltr)) .icon-inner{-webkit-transform:scaleX(1);transform:scaleX(1)}}:host(.icon-small){font-size:1.125rem !important}:host(.icon-large){font-size:2rem !important}:host(.ion-color){color:var(--ion-color-base) !important}:host(.ion-color-primary){--ion-color-base:var(--ion-color-primary, #3880ff)}:host(.ion-color-secondary){--ion-color-base:var(--ion-color-secondary, #0cd1e8)}:host(.ion-color-tertiary){--ion-color-base:var(--ion-color-tertiary, #f4a942)}:host(.ion-color-success){--ion-color-base:var(--ion-color-success, #10dc60)}:host(.ion-color-warning){--ion-color-base:var(--ion-color-warning, #ffce00)}:host(.ion-color-danger){--ion-color-base:var(--ion-color-danger, #f14141)}:host(.ion-color-light){--ion-color-base:var(--ion-color-light, #f4f5f8)}:host(.ion-color-medium){--ion-color-base:var(--ion-color-medium, #989aa2)}:host(.ion-color-dark){--ion-color-base:var(--ion-color-dark, #222428)}\";\n\nconst Icon = /*@__PURE__*/ proxyCustomElement(class Icon extends HTMLElement {\n    constructor() {\n        super();\n        this.__registerHost();\n        this.__attachShadow();\n        this.iconName = null;\n        this.inheritedAttributes = {};\n        this.didLoadIcon = false;\n        this.isVisible = false;\n        /**\n         * The mode determines which platform styles to use.\n         */\n        this.mode = getIonMode();\n        /**\n         * If enabled, ion-icon will be loaded lazily when it's visible in the viewport.\n         * Default, `false`.\n         */\n        this.lazy = false;\n        /**\n         * When set to `false`, SVG content that is HTTP fetched will not be checked\n         * if the response SVG content has any `<script>` elements, or any attributes\n         * that start with `on`, such as `onclick`.\n         * @default true\n         */\n        this.sanitize = true;\n    }\n    componentWillLoad() {\n        this.inheritedAttributes = inheritAttributes(this.el, ['aria-label']);\n    }\n    connectedCallback() {\n        /**\n         * purposely do not return the promise here because loading\n         * the svg file should not hold up loading the app\n         * only load the svg if it's visible\n         */\n        this.waitUntilVisible(this.el, '50px', () => {\n            this.isVisible = true;\n            this.loadIcon();\n        });\n    }\n    /**\n     * Loads the icon after the component has finished rendering.\n     */\n    componentDidLoad() {\n        /**\n         * Addresses an Angular issue where property values are assigned after the 'connectedCallback' but prior to the registration of watchers.\n         * This enhancement ensures the loading of an icon when the component has finished rendering and the icon has yet to apply the SVG data.\n         * This modification pertains to the usage of Angular's binding syntax:\n         * `<ion-icon [name]=\"myIconName\"></ion-icon>`\n         */\n        if (!this.didLoadIcon) {\n            this.loadIcon();\n        }\n    }\n    /**\n     * Disconnect the IntersectionObserver.\n     */\n    disconnectedCallback() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n    /**\n     * Wait until the icon is visible in the viewport.\n     * @param el - The element to observe.\n     * @param rootMargin - The root margin of the observer.\n     * @param cb - The callback to call when the element is visible.\n     */\n    waitUntilVisible(el, rootMargin, cb) {\n        /**\n         * IntersectionObserver is a browser API that allows you to observe\n         * the visibility of an element relative to a root element. It is\n         * supported in all modern browsers, except IE and when server-side\n         * rendering.\n         */\n        const hasIntersectionObserverSupport = Boolean(Build.isBrowser && this.lazy && typeof window !== 'undefined' && window.IntersectionObserver);\n        /**\n         * browser doesn't support IntersectionObserver\n         * so just fallback to always show it\n         */\n        if (!hasIntersectionObserverSupport) {\n            return cb();\n        }\n        const io = (this.io = new window.IntersectionObserver((data) => {\n            if (data[0].isIntersecting) {\n                io.disconnect();\n                this.io = undefined;\n                cb();\n            }\n        }, { rootMargin }));\n        io.observe(el);\n    }\n    /**\n     * Watch for changes to the icon name, src, icon, ios, or md properties.\n     * When a change is detected, the icon will be loaded.\n     */\n    loadIcon() {\n        if (Build.isBrowser && this.isVisible) {\n            const url = getUrl(this);\n            if (url) {\n                if (ioniconContent.has(url)) {\n                    // sync if it's already loaded\n                    this.svgContent = ioniconContent.get(url);\n                }\n                else {\n                    // async if it hasn't been loaded\n                    getSvgContent(url, this.sanitize).then(() => (this.svgContent = ioniconContent.get(url)));\n                }\n                this.didLoadIcon = true;\n            }\n        }\n        this.iconName = getName(this.name, this.icon, this.mode, this.ios, this.md);\n    }\n    render() {\n        const { flipRtl, iconName, inheritedAttributes, el } = this;\n        const mode = this.mode || 'md';\n        /**\n         * we have designated that arrows & chevrons should automatically flip (unless flip-rtl\n         * is set to false) because \"back\" is left in ltr and right in rtl, and \"forward\" is the opposite\n         */\n        const shouldAutoFlip = iconName\n            ? (iconName.includes('arrow') || iconName.includes('chevron')) && flipRtl !== false\n            : false;\n        /**\n         * if shouldBeFlippable is true, the icon should change direction when `dir` changes\n         */\n        const shouldBeFlippable = flipRtl || shouldAutoFlip;\n        return (h(Host, Object.assign({ key: '0578c899781ca145dd8205acd9670af39b57cf2e', role: \"img\", class: Object.assign(Object.assign({ [mode]: true }, createColorClasses(this.color)), { [`icon-${this.size}`]: !!this.size, 'flip-rtl': shouldBeFlippable, 'icon-rtl': shouldBeFlippable && isRTL(el) }) }, inheritedAttributes), Build.isBrowser && this.svgContent ? (h(\"div\", { class: \"icon-inner\", innerHTML: this.svgContent })) : (h(\"div\", { class: \"icon-inner\" }))));\n    }\n    static get assetsDirs() { return [\"svg\"]; }\n    get el() { return this; }\n    static get watchers() { return {\n        \"name\": [\"loadIcon\"],\n        \"src\": [\"loadIcon\"],\n        \"icon\": [\"loadIcon\"],\n        \"ios\": [\"loadIcon\"],\n        \"md\": [\"loadIcon\"]\n    }; }\n    static get style() { return iconCss; }\n}, [257, \"ion-icon\", {\n        \"mode\": [1025],\n        \"color\": [1],\n        \"ios\": [1],\n        \"md\": [1],\n        \"flipRtl\": [4, \"flip-rtl\"],\n        \"name\": [513],\n        \"src\": [1],\n        \"icon\": [8],\n        \"size\": [1],\n        \"lazy\": [4],\n        \"sanitize\": [4],\n        \"svgContent\": [32],\n        \"isVisible\": [32]\n    }, undefined, {\n        \"name\": [\"loadIcon\"],\n        \"src\": [\"loadIcon\"],\n        \"icon\": [\"loadIcon\"],\n        \"ios\": [\"loadIcon\"],\n        \"md\": [\"loadIcon\"]\n    }]);\n/**\n * Get the mode of the document.\n * @returns The mode of the document.\n */\nconst getIonMode = () => (Build.isBrowser && typeof document !== 'undefined' && document.documentElement.getAttribute('mode')) || 'md';\n/**\n * Create color classes for the icon.\n * @param color - The color of the icon.\n * @returns The color classes for the icon.\n */\nconst createColorClasses = (color) => {\n    return color\n        ? {\n            'ion-color': true,\n            [`ion-color-${color}`]: true,\n        }\n        : null;\n};\nfunction defineCustomElement() {\n    if (typeof customElements === \"undefined\") {\n        return;\n    }\n    const components = [\"ion-icon\"];\n    components.forEach(tagName => { switch (tagName) {\n        case \"ion-icon\":\n            if (!customElements.get(tagName)) {\n                customElements.define(tagName, Icon);\n            }\n            break;\n    } });\n}\n\nexport { Icon as I, defineCustomElement as d };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}