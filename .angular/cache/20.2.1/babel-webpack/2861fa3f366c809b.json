{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { p as printIonWarning } from './index4.js';\nimport { c as createColorClasses } from './theme.js';\nimport { l as eyeOff, m as eye } from './index6.js';\nimport { b as getIonMode } from './ionic-global.js';\nimport { d as defineCustomElement$4 } from './button.js';\nimport { d as defineCustomElement$3 } from './icon.js';\nimport { d as defineCustomElement$2 } from './ripple-effect.js';\nconst iosInputPasswordToggleCss = \"\";\nconst mdInputPasswordToggleCss = \"\";\nconst InputPasswordToggle = /*@__PURE__*/proxyCustomElement(class InputPasswordToggle extends HTMLElement {\n  constructor() {\n    super();\n    this.__registerHost();\n    this.__attachShadow();\n    /**\n     * @internal\n     */\n    this.type = 'password';\n    this.togglePasswordVisibility = () => {\n      const {\n        inputElRef\n      } = this;\n      if (!inputElRef) {\n        return;\n      }\n      inputElRef.type = inputElRef.type === 'text' ? 'password' : 'text';\n    };\n  }\n  /**\n   * Whenever the input type changes we need to re-run validation to ensure the password\n   * toggle is being used with the correct input type. If the application changes the type\n   * outside of this component we also need to re-render so the correct icon is shown.\n   */\n  onTypeChange(newValue) {\n    if (newValue !== 'text' && newValue !== 'password') {\n      printIonWarning(`[ion-input-password-toggle] - Only inputs of type \"text\" or \"password\" are supported. Input of type \"${newValue}\" is not compatible.`, this.el);\n      return;\n    }\n  }\n  connectedCallback() {\n    const {\n      el\n    } = this;\n    const inputElRef = this.inputElRef = el.closest('ion-input');\n    if (!inputElRef) {\n      printIonWarning('[ion-input-password-toggle] - No ancestor ion-input found. This component must be slotted inside of an ion-input.', el);\n      return;\n    }\n    /**\n     * Important: Set the type in connectedCallback because the default value\n     * of this.type may not always be accurate. Usually inputs have the \"password\" type\n     * but it is possible to have the input to initially have the \"text\" type. In that scenario\n     * the wrong icon will show briefly before switching to the correct icon. Setting the\n     * type here allows us to avoid that flicker.\n     */\n    this.type = inputElRef.type;\n  }\n  disconnectedCallback() {\n    this.inputElRef = null;\n  }\n  render() {\n    var _a, _b;\n    const {\n      color,\n      type\n    } = this;\n    const mode = getIonMode(this);\n    const showPasswordIcon = (_a = this.showIcon) !== null && _a !== void 0 ? _a : eye;\n    const hidePasswordIcon = (_b = this.hideIcon) !== null && _b !== void 0 ? _b : eyeOff;\n    const isPasswordVisible = type === 'text';\n    return h(Host, {\n      key: '91bc55664d496fe457518bd112865dd7811d0c17',\n      class: createColorClasses(color, {\n        [mode]: true\n      })\n    }, h(\"ion-button\", {\n      key: 'f3e436422110c9cb4d5c0b83500255b24ab4cdef',\n      mode: mode,\n      color: color,\n      fill: \"clear\",\n      shape: \"round\",\n      \"aria-checked\": isPasswordVisible ? 'true' : 'false',\n      \"aria-label\": isPasswordVisible ? 'Hide password' : 'Show password',\n      role: \"switch\",\n      type: \"button\",\n      onPointerDown: ev => {\n        /**\n         * This prevents mobile browsers from\n         * blurring the input when the password toggle\n         * button is activated.\n         */\n        ev.preventDefault();\n      },\n      onClick: this.togglePasswordVisibility\n    }, h(\"ion-icon\", {\n      key: '5c8b121153f148f92aa7cba0447673a4f6f3ad1e',\n      slot: \"icon-only\",\n      \"aria-hidden\": \"true\",\n      icon: isPasswordVisible ? hidePasswordIcon : showPasswordIcon\n    })));\n  }\n  get el() {\n    return this;\n  }\n  static get watchers() {\n    return {\n      \"type\": [\"onTypeChange\"]\n    };\n  }\n  static get style() {\n    return {\n      ios: iosInputPasswordToggleCss,\n      md: mdInputPasswordToggleCss\n    };\n  }\n}, [289, \"ion-input-password-toggle\", {\n  \"color\": [513],\n  \"showIcon\": [1, \"show-icon\"],\n  \"hideIcon\": [1, \"hide-icon\"],\n  \"type\": [1025]\n}, undefined, {\n  \"type\": [\"onTypeChange\"]\n}]);\nfunction defineCustomElement$1() {\n  if (typeof customElements === \"undefined\") {\n    return;\n  }\n  const components = [\"ion-input-password-toggle\", \"ion-button\", \"ion-icon\", \"ion-ripple-effect\"];\n  components.forEach(tagName => {\n    switch (tagName) {\n      case \"ion-input-password-toggle\":\n        if (!customElements.get(tagName)) {\n          customElements.define(tagName, InputPasswordToggle);\n        }\n        break;\n      case \"ion-button\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$4();\n        }\n        break;\n      case \"ion-icon\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$3();\n        }\n        break;\n      case \"ion-ripple-effect\":\n        if (!customElements.get(tagName)) {\n          defineCustomElement$2();\n        }\n        break;\n    }\n  });\n}\nconst IonInputPasswordToggle = InputPasswordToggle;\nconst defineCustomElement = defineCustomElement$1;\nexport { IonInputPasswordToggle, defineCustomElement };","map":{"version":3,"names":["proxyCustomElement","HTMLElement","h","Host","p","printIonWarning","c","createColorClasses","l","eyeOff","m","eye","b","getIonMode","d","defineCustomElement$4","defineCustomElement$3","defineCustomElement$2","iosInputPasswordToggleCss","mdInputPasswordToggleCss","InputPasswordToggle","constructor","__registerHost","__attachShadow","type","togglePasswordVisibility","inputElRef","onTypeChange","newValue","el","connectedCallback","closest","disconnectedCallback","render","_a","_b","color","mode","showPasswordIcon","showIcon","hidePasswordIcon","hideIcon","isPasswordVisible","key","class","fill","shape","role","onPointerDown","ev","preventDefault","onClick","slot","icon","watchers","style","ios","md","undefined","defineCustomElement$1","customElements","components","forEach","tagName","get","define","IonInputPasswordToggle","defineCustomElement"],"sources":["/home/project/node_modules/@ionic/core/components/ion-input-password-toggle.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { proxyCustomElement, HTMLElement, h, Host } from '@stencil/core/internal/client';\nimport { p as printIonWarning } from './index4.js';\nimport { c as createColorClasses } from './theme.js';\nimport { l as eyeOff, m as eye } from './index6.js';\nimport { b as getIonMode } from './ionic-global.js';\nimport { d as defineCustomElement$4 } from './button.js';\nimport { d as defineCustomElement$3 } from './icon.js';\nimport { d as defineCustomElement$2 } from './ripple-effect.js';\n\nconst iosInputPasswordToggleCss = \"\";\n\nconst mdInputPasswordToggleCss = \"\";\n\nconst InputPasswordToggle = /*@__PURE__*/ proxyCustomElement(class InputPasswordToggle extends HTMLElement {\n    constructor() {\n        super();\n        this.__registerHost();\n        this.__attachShadow();\n        /**\n         * @internal\n         */\n        this.type = 'password';\n        this.togglePasswordVisibility = () => {\n            const { inputElRef } = this;\n            if (!inputElRef) {\n                return;\n            }\n            inputElRef.type = inputElRef.type === 'text' ? 'password' : 'text';\n        };\n    }\n    /**\n     * Whenever the input type changes we need to re-run validation to ensure the password\n     * toggle is being used with the correct input type. If the application changes the type\n     * outside of this component we also need to re-render so the correct icon is shown.\n     */\n    onTypeChange(newValue) {\n        if (newValue !== 'text' && newValue !== 'password') {\n            printIonWarning(`[ion-input-password-toggle] - Only inputs of type \"text\" or \"password\" are supported. Input of type \"${newValue}\" is not compatible.`, this.el);\n            return;\n        }\n    }\n    connectedCallback() {\n        const { el } = this;\n        const inputElRef = (this.inputElRef = el.closest('ion-input'));\n        if (!inputElRef) {\n            printIonWarning('[ion-input-password-toggle] - No ancestor ion-input found. This component must be slotted inside of an ion-input.', el);\n            return;\n        }\n        /**\n         * Important: Set the type in connectedCallback because the default value\n         * of this.type may not always be accurate. Usually inputs have the \"password\" type\n         * but it is possible to have the input to initially have the \"text\" type. In that scenario\n         * the wrong icon will show briefly before switching to the correct icon. Setting the\n         * type here allows us to avoid that flicker.\n         */\n        this.type = inputElRef.type;\n    }\n    disconnectedCallback() {\n        this.inputElRef = null;\n    }\n    render() {\n        var _a, _b;\n        const { color, type } = this;\n        const mode = getIonMode(this);\n        const showPasswordIcon = (_a = this.showIcon) !== null && _a !== void 0 ? _a : eye;\n        const hidePasswordIcon = (_b = this.hideIcon) !== null && _b !== void 0 ? _b : eyeOff;\n        const isPasswordVisible = type === 'text';\n        return (h(Host, { key: '91bc55664d496fe457518bd112865dd7811d0c17', class: createColorClasses(color, {\n                [mode]: true,\n            }) }, h(\"ion-button\", { key: 'f3e436422110c9cb4d5c0b83500255b24ab4cdef', mode: mode, color: color, fill: \"clear\", shape: \"round\", \"aria-checked\": isPasswordVisible ? 'true' : 'false', \"aria-label\": isPasswordVisible ? 'Hide password' : 'Show password', role: \"switch\", type: \"button\", onPointerDown: (ev) => {\n                /**\n                 * This prevents mobile browsers from\n                 * blurring the input when the password toggle\n                 * button is activated.\n                 */\n                ev.preventDefault();\n            }, onClick: this.togglePasswordVisibility }, h(\"ion-icon\", { key: '5c8b121153f148f92aa7cba0447673a4f6f3ad1e', slot: \"icon-only\", \"aria-hidden\": \"true\", icon: isPasswordVisible ? hidePasswordIcon : showPasswordIcon }))));\n    }\n    get el() { return this; }\n    static get watchers() { return {\n        \"type\": [\"onTypeChange\"]\n    }; }\n    static get style() { return {\n        ios: iosInputPasswordToggleCss,\n        md: mdInputPasswordToggleCss\n    }; }\n}, [289, \"ion-input-password-toggle\", {\n        \"color\": [513],\n        \"showIcon\": [1, \"show-icon\"],\n        \"hideIcon\": [1, \"hide-icon\"],\n        \"type\": [1025]\n    }, undefined, {\n        \"type\": [\"onTypeChange\"]\n    }]);\nfunction defineCustomElement$1() {\n    if (typeof customElements === \"undefined\") {\n        return;\n    }\n    const components = [\"ion-input-password-toggle\", \"ion-button\", \"ion-icon\", \"ion-ripple-effect\"];\n    components.forEach(tagName => { switch (tagName) {\n        case \"ion-input-password-toggle\":\n            if (!customElements.get(tagName)) {\n                customElements.define(tagName, InputPasswordToggle);\n            }\n            break;\n        case \"ion-button\":\n            if (!customElements.get(tagName)) {\n                defineCustomElement$4();\n            }\n            break;\n        case \"ion-icon\":\n            if (!customElements.get(tagName)) {\n                defineCustomElement$3();\n            }\n            break;\n        case \"ion-ripple-effect\":\n            if (!customElements.get(tagName)) {\n                defineCustomElement$2();\n            }\n            break;\n    } });\n}\n\nconst IonInputPasswordToggle = InputPasswordToggle;\nconst defineCustomElement = defineCustomElement$1;\n\nexport { IonInputPasswordToggle, defineCustomElement };\n"],"mappings":"AAAA;AACA;AACA;AACA,SAASA,kBAAkB,EAAEC,WAAW,EAAEC,CAAC,EAAEC,IAAI,QAAQ,+BAA+B;AACxF,SAASC,CAAC,IAAIC,eAAe,QAAQ,aAAa;AAClD,SAASC,CAAC,IAAIC,kBAAkB,QAAQ,YAAY;AACpD,SAASC,CAAC,IAAIC,MAAM,EAAEC,CAAC,IAAIC,GAAG,QAAQ,aAAa;AACnD,SAASC,CAAC,IAAIC,UAAU,QAAQ,mBAAmB;AACnD,SAASC,CAAC,IAAIC,qBAAqB,QAAQ,aAAa;AACxD,SAASD,CAAC,IAAIE,qBAAqB,QAAQ,WAAW;AACtD,SAASF,CAAC,IAAIG,qBAAqB,QAAQ,oBAAoB;AAE/D,MAAMC,yBAAyB,GAAG,EAAE;AAEpC,MAAMC,wBAAwB,GAAG,EAAE;AAEnC,MAAMC,mBAAmB,GAAG,aAAcpB,kBAAkB,CAAC,MAAMoB,mBAAmB,SAASnB,WAAW,CAAC;EACvGoB,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB,IAAI,CAACC,cAAc,CAAC,CAAC;IACrB;AACR;AACA;IACQ,IAAI,CAACC,IAAI,GAAG,UAAU;IACtB,IAAI,CAACC,wBAAwB,GAAG,MAAM;MAClC,MAAM;QAAEC;MAAW,CAAC,GAAG,IAAI;MAC3B,IAAI,CAACA,UAAU,EAAE;QACb;MACJ;MACAA,UAAU,CAACF,IAAI,GAAGE,UAAU,CAACF,IAAI,KAAK,MAAM,GAAG,UAAU,GAAG,MAAM;IACtE,CAAC;EACL;EACA;AACJ;AACA;AACA;AACA;EACIG,YAAYA,CAACC,QAAQ,EAAE;IACnB,IAAIA,QAAQ,KAAK,MAAM,IAAIA,QAAQ,KAAK,UAAU,EAAE;MAChDvB,eAAe,CAAC,wGAAwGuB,QAAQ,sBAAsB,EAAE,IAAI,CAACC,EAAE,CAAC;MAChK;IACJ;EACJ;EACAC,iBAAiBA,CAAA,EAAG;IAChB,MAAM;MAAED;IAAG,CAAC,GAAG,IAAI;IACnB,MAAMH,UAAU,GAAI,IAAI,CAACA,UAAU,GAAGG,EAAE,CAACE,OAAO,CAAC,WAAW,CAAE;IAC9D,IAAI,CAACL,UAAU,EAAE;MACbrB,eAAe,CAAC,mHAAmH,EAAEwB,EAAE,CAAC;MACxI;IACJ;IACA;AACR;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACL,IAAI,GAAGE,UAAU,CAACF,IAAI;EAC/B;EACAQ,oBAAoBA,CAAA,EAAG;IACnB,IAAI,CAACN,UAAU,GAAG,IAAI;EAC1B;EACAO,MAAMA,CAAA,EAAG;IACL,IAAIC,EAAE,EAAEC,EAAE;IACV,MAAM;MAAEC,KAAK;MAAEZ;IAAK,CAAC,GAAG,IAAI;IAC5B,MAAMa,IAAI,GAAGxB,UAAU,CAAC,IAAI,CAAC;IAC7B,MAAMyB,gBAAgB,GAAG,CAACJ,EAAE,GAAG,IAAI,CAACK,QAAQ,MAAM,IAAI,IAAIL,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAGvB,GAAG;IAClF,MAAM6B,gBAAgB,GAAG,CAACL,EAAE,GAAG,IAAI,CAACM,QAAQ,MAAM,IAAI,IAAIN,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG1B,MAAM;IACrF,MAAMiC,iBAAiB,GAAGlB,IAAI,KAAK,MAAM;IACzC,OAAQtB,CAAC,CAACC,IAAI,EAAE;MAAEwC,GAAG,EAAE,0CAA0C;MAAEC,KAAK,EAAErC,kBAAkB,CAAC6B,KAAK,EAAE;QAC5F,CAACC,IAAI,GAAG;MACZ,CAAC;IAAE,CAAC,EAAEnC,CAAC,CAAC,YAAY,EAAE;MAAEyC,GAAG,EAAE,0CAA0C;MAAEN,IAAI,EAAEA,IAAI;MAAED,KAAK,EAAEA,KAAK;MAAES,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE,OAAO;MAAE,cAAc,EAAEJ,iBAAiB,GAAG,MAAM,GAAG,OAAO;MAAE,YAAY,EAAEA,iBAAiB,GAAG,eAAe,GAAG,eAAe;MAAEK,IAAI,EAAE,QAAQ;MAAEvB,IAAI,EAAE,QAAQ;MAAEwB,aAAa,EAAGC,EAAE,IAAK;QAChT;AAChB;AACA;AACA;AACA;QACgBA,EAAE,CAACC,cAAc,CAAC,CAAC;MACvB,CAAC;MAAEC,OAAO,EAAE,IAAI,CAAC1B;IAAyB,CAAC,EAAEvB,CAAC,CAAC,UAAU,EAAE;MAAEyC,GAAG,EAAE,0CAA0C;MAAES,IAAI,EAAE,WAAW;MAAE,aAAa,EAAE,MAAM;MAAEC,IAAI,EAAEX,iBAAiB,GAAGF,gBAAgB,GAAGF;IAAiB,CAAC,CAAC,CAAC,CAAC;EAClO;EACA,IAAIT,EAAEA,CAAA,EAAG;IAAE,OAAO,IAAI;EAAE;EACxB,WAAWyB,QAAQA,CAAA,EAAG;IAAE,OAAO;MAC3B,MAAM,EAAE,CAAC,cAAc;IAC3B,CAAC;EAAE;EACH,WAAWC,KAAKA,CAAA,EAAG;IAAE,OAAO;MACxBC,GAAG,EAAEtC,yBAAyB;MAC9BuC,EAAE,EAAEtC;IACR,CAAC;EAAE;AACP,CAAC,EAAE,CAAC,GAAG,EAAE,2BAA2B,EAAE;EAC9B,OAAO,EAAE,CAAC,GAAG,CAAC;EACd,UAAU,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC;EAC5B,UAAU,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC;EAC5B,MAAM,EAAE,CAAC,IAAI;AACjB,CAAC,EAAEuC,SAAS,EAAE;EACV,MAAM,EAAE,CAAC,cAAc;AAC3B,CAAC,CAAC,CAAC;AACP,SAASC,qBAAqBA,CAAA,EAAG;EAC7B,IAAI,OAAOC,cAAc,KAAK,WAAW,EAAE;IACvC;EACJ;EACA,MAAMC,UAAU,GAAG,CAAC,2BAA2B,EAAE,YAAY,EAAE,UAAU,EAAE,mBAAmB,CAAC;EAC/FA,UAAU,CAACC,OAAO,CAACC,OAAO,IAAI;IAAE,QAAQA,OAAO;MAC3C,KAAK,2BAA2B;QAC5B,IAAI,CAACH,cAAc,CAACI,GAAG,CAACD,OAAO,CAAC,EAAE;UAC9BH,cAAc,CAACK,MAAM,CAACF,OAAO,EAAE3C,mBAAmB,CAAC;QACvD;QACA;MACJ,KAAK,YAAY;QACb,IAAI,CAACwC,cAAc,CAACI,GAAG,CAACD,OAAO,CAAC,EAAE;UAC9BhD,qBAAqB,CAAC,CAAC;QAC3B;QACA;MACJ,KAAK,UAAU;QACX,IAAI,CAAC6C,cAAc,CAACI,GAAG,CAACD,OAAO,CAAC,EAAE;UAC9B/C,qBAAqB,CAAC,CAAC;QAC3B;QACA;MACJ,KAAK,mBAAmB;QACpB,IAAI,CAAC4C,cAAc,CAACI,GAAG,CAACD,OAAO,CAAC,EAAE;UAC9B9C,qBAAqB,CAAC,CAAC;QAC3B;QACA;IACR;EAAE,CAAC,CAAC;AACR;AAEA,MAAMiD,sBAAsB,GAAG9C,mBAAmB;AAClD,MAAM+C,mBAAmB,GAAGR,qBAAqB;AAEjD,SAASO,sBAAsB,EAAEC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}